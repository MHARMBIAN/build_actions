# ------------------------------------------------------------------------------------------
# This is a workflow to build an bootable Armbian SD card image with a Linux kernel
# and appropriate boot images to setup the NAND on a Cubietruck (SUNXI A20 board)
# for:
#   - SUNXI NAND support within mainline kernel
#   - booting from NAND with mainline U-Boot
#   - have a NAND partition configured for an UBI filesystem
#
# ------------------------------------------------------------------------------------------
name: Build Armbian image

on:
  workflow_dispatch:
    # no parms
  #release:
  #  types: published
  #push:
  #  branches:
  #    - master
  #    - boards/cubietruck
  #schedule:
  #    - cron: 0 8 * * 5
  #watch:
  #  types: started

env:
  ARMBIAN_RELEASE_TAG: v2022.07.05
  BUILD_MINIMAL: yes
  KERNEL_ONLY: no
  KERNEL_CONFIGURE: no
  BOARD: cubietruck
  BRANCH: current
  RELEASE: focal
  BUILD_DESKTOP: no
  # REPOSITORY_INSTALL (comma-separated list): list of core packages which will be installed from repository
  # Available options: u-boot, kernel, bsp, armbian-bsp-cli,armbian-bsp-desktop,armbian-desktop,armbian-config, armbian-firmware
  # list, what is not wanted to be built
  # U-Boot only:
  # REPOSITORY_INSTALL: "kernel,armbian-bsp-cli,armbian-bsp-desktop,armbian-desktop,armbian-config,armbian-firmware"
  REPOSITORY_INSTALL: ""
  # Mainline google mirror does not work yet - root cause unknown
  USE_MAINLINE_GOOGLE_MIRROR: no

jobs:
  build:
    name: Build Armbian
    runs-on: ubuntu-latest
    #if: github.event.repository.owner.id == github.event.sender.id

    steps:
      - name: Checkout this repo
        uses: actions/checkout@master

      - name: Initialize environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          #sudo swapoff /swapfile
          #sudo rm -rf /swapfile /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          #sudo -E apt-get -qq autoremove --purge
          #sudo -E apt-get -qq clean

      - name: Download Armbian build source code
        run: |
          #curl -L -o armbian.tar.gz $(curl https://api.github.com/repos/armbian/build/releases | awk -F"[tarball_url]" '/tarball_url/{print $x}' | grep $ARMBIAN_RELEASE_TAG | sed 's/"//g' | sed 's/tarball_url://g' | sed 's/ //g' | sed 's/,//g')
          curl -L -o armbian.tar.gz https://github.com/MHARMBIAN/armbian_build/archive/refs/tags/${ARMBIAN_RELEASE_TAG}.tar.gz
          tar -xzf armbian.tar.gz
          rm -rf armbian.tar.gz
          mv armbian_build* armbian_build

      - name: Cache Armbian
        id: cache-armbian
        uses: actions/cache@v3
        env:
          cache-name: cache-armbian-build
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            armbian_build/cache/toolchain
            armbian_build/cache/rootfs
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          #key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          #restore-keys: |
            #${{ runner.os }}-build-${{ env.cache-name }}-
            #${{ runner.os }}-build-
            #${{ runner.os }}-

      - name: Copy userpatches to Armbian build dir
        run: |
          cp --verbose -R ${BOARD}/build/* armbian_build

      - name: Build Armbian
        id: build
        run: |
          cd armbian_build
          sudo -E ./compile.sh BUILD_MINIMAL=$BUILD_MINIMAL KERNEL_ONLY=$KERNEL_ONLY KERNEL_CONFIGURE=$KERNEL_CONFIGURE BOARD=$BOARD BRANCH=$BRANCH RELEASE=$RELEASE BUILD_DESKTOP=$BUILD_DESKTOP REPOSITORY_INSTALL=$REPOSITORY_INSTALL USE_MAINLINE_GOOGLE_MIRROR=$USE_MAINLINE_GOOGLE_MIRROR FORCE_USE_RAMDISK=yes USE_CCACHE=yes SYNC_CLOCK=no
          #shopt -s dotglob
          # Update permission to cache - post cache task will fail otherwise
          sudo chmod -R 775 cache
          #shopt -u dotglob
          echo "::set-output name=SDCARD_IMAGE_FILE::/tmp/Armbian_SDCard_Image_${BOARD}_${ARMBIAN_RELEASE_TAG}.tar.bz2"
          tar -cjvf ${{ steps.build.outputs.SDCARD_IMAGE_FILE }} output/images/*.img
          echo "::set-output name=STATUS::success"

      - name: Upload Armbian SD card image
        uses: actions/upload-artifact@master
        if: steps.build.outputs.STATUS == 'success'
        with:
          name: Armbian_SDCard_Image_${BOARD}_${ARMBIAN_RELEASE_TAG}
          path: |
            ${{ steps.build.outputs.SDCARD_IMAGE_FILE }}

      - name: Upload Armbian build logfiles
        uses: actions/upload-artifact@master
        with:
          name: Armbian_Build_LogFiles
          path: |
            armbian_build/output/debug/
