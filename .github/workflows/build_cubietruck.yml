name: Build Armbian

on:
  workflow_dispatch:
    # no parms
  #release:
  #  types: published
  push:
    branches:
      - master
      - boards/cubietruck
#  schedule:
#    - cron: 0 8 * * 5
#  watch:
#    types: started

env:
  RELEASE_SOURCE_TAG: v2022.07.05
  BUILD_MINIMAL: yes
  KERNEL_ONLY: no
  KERNEL_CONFIGURE: no
  BOARD: cubietruck
  BRANCH: current
  RELEASE: focal
  BUILD_DESKTOP: no
  # REPOSITORY_INSTALL (comma-separated list): list of core packages which will be installed from repository
  # Available options: u-boot, kernel, bsp, armbian-bsp-cli,armbian-bsp-desktop,armbian-desktop,armbian-config, armbian-firmware
  # list, what is not wanted to be built
  # U-Boot only:
  # REPOSITORY_INSTALL: "kernel,armbian-bsp-cli,armbian-bsp-desktop,armbian-desktop,armbian-config,armbian-firmware"
  REPOSITORY_INSTALL: ""
  USE_MAINLINE_GOOGLE_MIRROR: yes

jobs:
  build:
    runs-on: ubuntu-latest
    #if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        #sudo swapoff /swapfile
        #sudo rm -rf /swapfile /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        #sudo -E apt-get -qq autoremove --purge
        #sudo -E apt-get -qq clean

    - name: Download Armbian build source code
      run: |
        #curl -L -o armbian.tar.gz $(curl https://api.github.com/repos/armbian/build/releases | awk -F"[tarball_url]" '/tarball_url/{print $x}' | grep $RELEASE_SOURCE_TAG | sed 's/"//g' | sed 's/tarball_url://g' | sed 's/ //g' | sed 's/,//g')
        curl -L -o armbian.tar.gz https://github.com/MHARMBIAN/armbian_build/archive/refs/tags/${RELEASE_SOURCE_TAG}.tar.gz
        tar -xzf armbian.tar.gz
        rm -rf armbian.tar.gz
        mv armbian_build* armbian_build

    - name: Cache Armbian
      id: cache-armbian
      uses: actions/cache@v3
      env:
        cache-name: cache-armbian-build
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: |
          armbian_build/cache/toolchain
          armbian_build/cache/rootfs
        key: ${{ runner.os }}-build-${{ env.cache-name }}
        #key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        #restore-keys: |
          #${{ runner.os }}-build-${{ env.cache-name }}-
          #${{ runner.os }}-build-
          #${{ runner.os }}-

    - name: Build Armbian
      id: build
      run: |
        cd armbian_build
        sudo -E ./compile.sh BUILD_MINIMAL=$BUILD_MINIMAL KERNEL_ONLY=$KERNEL_ONLY KERNEL_CONFIGURE=$KERNEL_CONFIGURE BOARD=$BOARD BRANCH=$BRANCH RELEASE=$RELEASE BUILD_DESKTOP=$BUILD_DESKTOP REPOSITORY_INSTALL=$REPOSITORY_INSTALL USE_MAINLINE_GOOGLE_MIRROR=$USE_MAINLINE_GOOGLE_MIRROR FORCE_USE_RAMDISK=yes USE_CCACHE=yes
        #shopt -s dotglob
        # Update permission to cache - post cache task will fail otherwise
        sudo chmod -R 775 cache
        #shopt -u dotglob
        tar -cjvf /tmp/Armbian.tar.bz2 output/images/*.img
        echo "::set-output name=status::success"

    - name: Upload Armbian image
      uses: actions/upload-artifact@master
      if: steps.build.outputs.status == 'success'
      with:
        name: Armbian_SDImage_$BOARD_$RELEASE_SOURCE_TAG
        path: /tmp/Armbian.tar.bz2
