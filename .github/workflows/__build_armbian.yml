# ----------------------------------------------------------------------------------
# This is a workflow to build a bootable Armbian SD card image with a Linux kernel
# ----------------------------------------------------------------------------------
name: Common Armbian Build Script

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      runner:
        required: true
        type: string
      uploading:
        required: false
        type: boolean
      # dryrun: if true, the output files will be simulated as just echoed text files
      dryrun:
        required: false
        type: boolean
      ARMBIAN_RELEASE_TAG:
        required: true
        type: string
      BUILD_MINIMAL:
        required: true
        type: string
      BUILD_DESKTOP:
        required: true
        type: string
      KERNEL_GIT:
        required: false
        type: string
      KERNEL_CONFIGURE:
        required: true
        type: string
      BOARD:
        required: true
        type: string
      BRANCH:
        required: true
        type: string
      RELEASE:
        required: true
        type: string
      IMAGE_COMPRESS_ENDING:
        required: true
        type: string
      # REPOSITORY_INSTALL (comma-separated list): list of core packages which will be installed from repository
      # Available options: u-boot, kernel, bsp, armbian-bsp-cli,armbian-bsp-desktop,armbian-desktop,armbian-config, armbian-firmware
      # list, what is not wanted to be built
      # U-Boot only:
      # REPOSITORY_INSTALL: "kernel,armbian-bsp-cli,armbian-bsp-desktop,armbian-desktop,armbian-config,armbian-firmware"
      REPOSITORY_INSTALL:
        required: false
        type: string
    outputs:
      image_UploadArtifactName:
        description: "The name of the upload artifact for the SD card image"
        value: ${{ jobs.job1_Build.outputs.image_UploadArtifactName }}
      packages_UploadArtifactName:
        description: "The name of the upload artifact for the build packages"
        value: ${{ jobs.job1_Build.outputs.packages_UploadArtifactName }}
      logfiles_UploadArtifactName:
        description: "The name of the upload artifact for the build process log files"
        value: ${{ jobs.job1_Build.outputs.logfiles_UploadArtifactName }}
      board_Name:
        description: "The human readable hardware boardname"
        value: ${{ jobs.job1_Build.outputs.board_Name }}
      image_CompressEnding:
        description: "The compressed image file extension"
        value: ${{ inputs.IMAGE_COMPRESS_ENDING }}

jobs:
  job1_Build:
    name: Build Armbian Image
    runs-on: ${{ inputs.runner }}
    #if: github.event.repository.owner.id == github.event.sender.id
    outputs:
      image_UploadArtifactName: ${{ steps.build.outputs.IMAGE_UPLOAD_ARTIFACT_NAME }}
      packages_UploadArtifactName: ${{ steps.build.outputs.PACKAGES_UPLOAD_ARTIFACT_NAME }}
      logfiles_UploadArtifactName: ${{ steps.build.outputs.LOGFILES_UPLOAD_ARTIFACT_NAME }}
      board_Name: ${{ steps.build.outputs.BOARD_NAME }}
    steps:
      - name: Initialize Environment from Workflow Inputs
        run: |
          echo "ARMBIAN_RELEASE_TAG=${{ inputs.ARMBIAN_RELEASE_TAG }}" >> $GITHUB_ENV
          echo "BUILD_MINIMAL=${{ inputs.BUILD_MINIMAL }}" >> $GITHUB_ENV
          echo "BUILD_DESKTOP=${{ inputs.BUILD_DESKTOP }}" >> $GITHUB_ENV
          echo "KERNEL_GIT=${{ inputs.KERNEL_GIT }}" >> $GITHUB_ENV
          echo "KERNEL_CONFIGURE=${{ inputs.KERNEL_CONFIGURE }}" >> $GITHUB_ENV
          echo "BOARD=${{ inputs.BOARD }}" >> $GITHUB_ENV
          echo "BRANCH=${{ inputs.BRANCH }}" >> $GITHUB_ENV
          echo "RELEASE=${{ inputs.RELEASE }}" >> $GITHUB_ENV
          echo "REPOSITORY_INSTALL=${{ inputs.REPOSITORY_INSTALL }}" >> $GITHUB_ENV
          echo "IMAGE_COMPRESS_ENDING=${{ inputs.IMAGE_COMPRESS_ENDING }}" >> $GITHUB_ENV

      - name: Log Environment
        run: |
          echo "  runner:                ${{ inputs.runner }}"
          echo "  uploading:             ${{ inputs.uploading }}"
          echo "  dryrun:                ${{ inputs.dryrun }}"
          echo "  ARMBIAN_RELEASE_TAG:   ${ARMBIAN_RELEASE_TAG}"
          echo "  BUILD_MINIMAL:         ${BUILD_MINIMAL}"
          echo "  BUILD_DESKTOP:         ${BUILD_DESKTOP}"
          echo "  KERNEL_GIT:            ${KERNEL_GIT}"
          echo "  KERNEL_CONFIGURE:      ${KERNEL_CONFIGURE}"
          echo "  BOARD:                 ${BOARD}"
          echo "  BRANCH:                ${BRANCH}"
          echo "  RELEASE:               ${RELEASE}"
          echo "  REPOSITORY_INSTALL:    ${REPOSITORY_INSTALL}"
          echo "  IMAGE_COMPRESS_ENDING  ${IMAGE_COMPRESS_ENDING}"

      - name: Checkout this repo
        uses: actions/checkout@v3

      - name: Download Armbian build source code
        run: |
          #curl -L -o armbian.tar.gz $(curl https://api.github.com/repos/armbian/build/releases | awk -F"[tarball_url]" '/tarball_url/{print $x}' | grep $ARMBIAN_RELEASE_TAG | sed 's/"//g' | sed 's/tarball_url://g' | sed 's/ //g' | sed 's/,//g')
          curl -L -o armbian.tar.gz https://github.com/MHARMBIAN/armbian_build/archive/refs/tags/${ARMBIAN_RELEASE_TAG}.tar.gz
          tar --verbose -xzf armbian.tar.gz
          rm --verbose -rf armbian.tar.gz
          mv --verbose armbian_build* armbian_build

      - name: Cache Armbian
        id: cache-armbian
        uses: actions/cache@v3
        env:
          cache-name: armbian-${{ env.BOARD }}-${{ env.ARMBIAN_RELEASE_TAG }}
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            armbian_build/cache
            armbian_build/output/debs
          key: ${{ runner.os }}-${{ env.cache-name }}
          #key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          #restore-keys: |
            #${{ runner.os }}-build-${{ env.cache-name }}-
            #${{ runner.os }}-build-
            #${{ runner.os }}-

      - name: Copy userpatches to Armbian build dir
        run: |
          cp --verbose -R ${BOARD}/build/* armbian_build

      - name: Build Armbian
        id: build
        run: |
          cd armbian_build
          # ensure to cleanup faked .deb files from probable cache since of a previous dry run
          [[ -d output/debs ]] && rm -f output/debs/*this_is_no_*.deb
          if [[ "${{ inputs.dryrun }}" != "true" ]]; then
            ./compile.sh \
            BUILD_MINIMAL="${BUILD_MINIMAL}" \
            KERNEL_GIT="${KERNEL_GIT}" \
            KERNEL_CONFIGURE="${KERNEL_CONFIGURE}" \
            BOARD="${BOARD}" \
            BRANCH="${BRANCH}" \
            RELEASE="${RELEASE}" \
            BUILD_DESKTOP="${BUILD_DESKTOP}" \
            REPOSITORY_INSTALL="${REPOSITORY_INSTALL}" \
            COMPRESS_OUTPUTIMAGE="sha,gpg,${IMAGE_COMPRESS_ENDING}" \
            SYNC_CLOCK="no" \
            FORCE_USE_RAMDISK="yes"
            shopt -s dotglob
            # Update permission to cache - post cache task will fail otherwise
            sudo chmod -R 775 cache
            shopt -u dotglob
          else
            mkdir -p output/{images,debs,logs}
            FAKED_BUILD_COMPRESSED_FILE_NAME="Armbian_22.08.0-dryrun_${BOARD^}_${RELEASE}_${BRANCH}_5.15.52_minimal.img.${IMAGE_COMPRESS_ENDING}"
            echo "This is a faked .${IMAGE_COMPRESS_ENDING} build output!" > "output/images/${FAKED_BUILD_COMPRESSED_FILE_NAME}"
            echo "This is a faked build output logfile!" > output/logs/compilation.log
            echo "This is a faked build output logfile!" > output/logs/compiler.log
            [[ -z "$(ls -A output/debs)" ]] && echo "This is a faked build output package file!" > output/debs/__this_is_no_debian_package__.deb
          fi
          ORIGINAL_IMAGE_BASE_NAME="$(basename -s .${IMAGE_COMPRESS_ENDING} output/images/*.${IMAGE_COMPRESS_ENDING})"
          if [[ $ORIGINAL_IMAGE_BASE_NAME == *.img ]]; then
            FINAL_IMAGE_BASE_NAME="$(basename -s .img ${ORIGINAL_IMAGE_BASE_NAME})_${ARMBIAN_RELEASE_TAG}.img"
          else
            FINAL_IMAGE_BASE_NAME="${ORIGINAL_IMAGE_BASE_NAME}_${ARMBIAN_RELEASE_TAG}"
          fi
          # Rename image file:
          sudo -E mv --verbose "output/images/${ORIGINAL_IMAGE_BASE_NAME}.${IMAGE_COMPRESS_ENDING}" "output/images/${FINAL_IMAGE_BASE_NAME}.${IMAGE_COMPRESS_ENDING}"
          # Set step outputs:
          echo "IMAGE_UPLOAD_ARTIFACT_NAME=${FINAL_IMAGE_BASE_NAME}" >> $GITHUB_OUTPUT
          echo "PACKAGES_UPLOAD_ARTIFACT_NAME=Armbian_Build_Packages_${ARMBIAN_RELEASE_TAG}" >> $GITHUB_OUTPUT
          echo "LOGFILES_UPLOAD_ARTIFACT_NAME=Armbian_Build_LogFiles_${ARMBIAN_RELEASE_TAG}" >> $GITHUB_OUTPUT
          echo "BOARD_NAME=${BOARD^}" >> $GITHUB_OUTPUT
          echo "STATUS=success" >> $GITHUB_OUTPUT

      - name: Upload Armbian SD card image
        if: inputs.uploading == true && steps.build.outputs.STATUS == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.build.outputs.IMAGE_UPLOAD_ARTIFACT_NAME }}
          path: |
            armbian_build/output/images/

      - name: Upload Armbian Build Packages
        if: inputs.uploading == true
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.build.outputs.PACKAGES_UPLOAD_ARTIFACT_NAME }}
          path: |
            armbian_build/output/debs/

      - name: Upload Armbian Build Logfiles
        if: inputs.uploading == true
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.build.outputs.LOGFILES_UPLOAD_ARTIFACT_NAME }}
          path: |
            armbian_build/output/logs/
