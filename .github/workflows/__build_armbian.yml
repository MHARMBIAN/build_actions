# ----------------------------------------------------------------------------------
# This is a workflow to build a bootable Armbian SD card image with a Linux kernel
# ----------------------------------------------------------------------------------
name: Common Armbian Build Script

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      runner:
        required: true
        type: string
      uploading:
        required: false
        type: boolean
      ARMBIAN_RELEASE_TAG:
        required: true
        type: string
      BUILD_MINIMAL:
        required: true
        type: string
      BUILD_DESKTOP:
        required: true
        type: string
      KERNEL_ONLY:
        required: true
        type: string
      KERNEL_CONFIGURE:
        required: true
        type: string
      BOARD:
        required: true
        type: string
      BRANCH:
        required: true
        type: string
      RELEASE:
        required: true
        type: string
      # REPOSITORY_INSTALL (comma-separated list): list of core packages which will be installed from repository
      # Available options: u-boot, kernel, bsp, armbian-bsp-cli,armbian-bsp-desktop,armbian-desktop,armbian-config, armbian-firmware
      # list, what is not wanted to be built
      # U-Boot only:
      # REPOSITORY_INSTALL: "kernel,armbian-bsp-cli,armbian-bsp-desktop,armbian-desktop,armbian-config,armbian-firmware"
      REPOSITORY_INSTALL:
        required: false
        type: string

jobs:
  Build:
    name: Build Armbian Image
    runs-on: ${{ inputs.runner }}
    #if: github.event.repository.owner.id == github.event.sender.id
    steps:
      - name: Initialize Environment from Workflow Inputs
        run: |
          echo "ARMBIAN_RELEASE_TAG=${{ inputs.ARMBIAN_RELEASE_TAG }}" >> $GITHUB_ENV
          echo "BUILD_MINIMAL=${{ inputs.BUILD_MINIMAL }}" >> $GITHUB_ENV
          echo "BUILD_DESKTOP=${{ inputs.BUILD_DESKTOP }}" >> $GITHUB_ENV
          echo "KERNEL_ONLY=${{ inputs.KERNEL_ONLY }}" >> $GITHUB_ENV
          echo "KERNEL_CONFIGURE=${{ inputs.KERNEL_CONFIGURE }}" >> $GITHUB_ENV
          echo "BOARD=${{ inputs.BOARD }}" >> $GITHUB_ENV
          echo "BRANCH=${{ inputs.BRANCH }}" >> $GITHUB_ENV
          echo "RELEASE=${{ inputs.RELEASE }}" >> $GITHUB_ENV
          echo "REPOSITORY_INSTALL=${{ inputs.REPOSITORY_INSTALL }}" >> $GITHUB_ENV

      - name: Log Environment
        run: |
          echo "  runner:              ${{ inputs.runner }}"
          echo "  uploading:           ${{ inputs.uploading }}"
          echo "  ARMBIAN_RELEASE_TAG: ${ARMBIAN_RELEASE_TAG}"
          echo "  BUILD_MINIMAL:       ${BUILD_MINIMAL}"
          echo "  BUILD_DESKTOP:       ${BUILD_DESKTOP}"
          echo "  KERNEL_ONLY:         ${KERNEL_ONLY}"
          echo "  KERNEL_CONFIGURE:    ${KERNEL_CONFIGURE}"
          echo "  BOARD:               ${BOARD}"
          echo "  BRANCH:              ${BRANCH}"
          echo "  RELEASE:             ${RELEASE}"
          echo "  REPOSITORY_INSTALL:  ${REPOSITORY_INSTALL}"

      - name: Checkout this repo
        uses: actions/checkout@master

      - name: Download Armbian build source code
        run: |
          #curl -L -o armbian.tar.gz $(curl https://api.github.com/repos/armbian/build/releases | awk -F"[tarball_url]" '/tarball_url/{print $x}' | grep $ARMBIAN_RELEASE_TAG | sed 's/"//g' | sed 's/tarball_url://g' | sed 's/ //g' | sed 's/,//g')
          curl -L -o armbian.tar.gz https://github.com/MHARMBIAN/armbian_build/archive/refs/tags/${ARMBIAN_RELEASE_TAG}.tar.gz
          tar --verbose -xzf armbian.tar.gz
          rm --verbose -rf armbian.tar.gz
          mv --verbose armbian_build* armbian_build

      - name: Cache Armbian
        id: cache-armbian
        uses: actions/cache@v3
        env:
          cache-name: cache-armbian-build
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            armbian_build/cache/toolchain
            armbian_build/cache/rootfs
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          #key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          #restore-keys: |
            #${{ runner.os }}-build-${{ env.cache-name }}-
            #${{ runner.os }}-build-
            #${{ runner.os }}-

      - name: Copy userpatches to Armbian build dir
        run: |
          cp --verbose -R ${BOARD}/build/* armbian_build

      - name: Build Armbian
        id: build
        run: |
          cd armbian_build
          sudo -E ./compile.sh \
          BUILD_MINIMAL="${BUILD_MINIMAL}" \
          KERNEL_ONLY="${KERNEL_ONLY}" \
          KERNEL_CONFIGURE="${KERNEL_CONFIGURE}" \
          BOARD="${BOARD}" \
          BRANCH="${BRANCH}" \
          RELEASE="${RELEASE}" \
          BUILD_DESKTOP="${BUILD_DESKTOP}" \
          REPOSITORY_INSTALL="${REPOSITORY_INSTALL}" \
          COMPRESS_OUTPUTIMAGE="sha,gpg,7z" \
          SYNC_CLOCK="no" \
          FORCE_USE_RAMDISK="yes"
          shopt -s dotglob
          # Update permission to cache - post cache task will fail otherwise
          sudo chmod -R 775 cache
          shopt -u dotglob
          ORIGINAL_IMAGE_BASE_NAME="$(basename -s .7z output/images/*.7z)"
          FINAL_IMAGE_BASE_NAME="${ORIGINAL_IMAGE_BASE_NAME}_${ARMBIAN_RELEASE_TAG}"
          # Rename image file:
          sudo -E mv --verbose "output/images/${ORIGINAL_IMAGE_BASE_NAME}.7z" "output/images/${FINAL_IMAGE_BASE_NAME}.7z"
          echo "::set-output name=FINAL_IMAGE_BASE_NAME::${FINAL_IMAGE_BASE_NAME}"
          echo "::set-output name=STATUS::success"

      - name: Upload Armbian SD card image
        uses: actions/upload-artifact@master
        if: inputs.uploading == true && steps.build.outputs.STATUS == 'success'
        with:
          name: ${{ steps.build.outputs.FINAL_IMAGE_BASE_NAME }}
          path: |
            armbian_build/output/images/

      - name: Upload Armbian build logfiles
        if: inputs.uploading == true
        uses: actions/upload-artifact@master
        with:
          name: Armbian_Build_LogFiles_${{ env.ARMBIAN_RELEASE_TAG }}
          path: |
            armbian_build/output/debug/
